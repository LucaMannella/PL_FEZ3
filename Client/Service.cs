//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using System.Ext;
using System.Ext.Xml;
using Ws.ServiceModel;
using Ws.Services.Mtom;
using Ws.Services.Serialization;
using XmlElement = Ws.Services.Xml.WsXmlNode;
using XmlAttribute = Ws.Services.Xml.WsXmlAttribute;
using XmlConvert = Ws.Services.Serialization.WsXmlConvert;

namespace tempuri.org
{
    
    
    [DataContract(Namespace="http://tempuri.org/")]
    public class getServerAddressWithPort
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public string myMacAddress;
    }
    
    public class getServerAddressWithPortDataContractSerializer : DataContractSerializer
    {
        
        public getServerAddressWithPortDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public getServerAddressWithPortDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            getServerAddressWithPort getServerAddressWithPortField = null;
            if (IsParentStartElement(reader, false, true))
            {
                getServerAddressWithPortField = new getServerAddressWithPort();
                reader.Read();
                if (IsChildStartElement(reader, "myMacAddress", true, false))
                {
                    reader.Read();
                    getServerAddressWithPortField.myMacAddress = reader.ReadString();
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return getServerAddressWithPortField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            getServerAddressWithPort getServerAddressWithPortField = ((getServerAddressWithPort)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "myMacAddress", true, false, getServerAddressWithPortField.myMacAddress))
                {
                    writer.WriteString(getServerAddressWithPortField.myMacAddress);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://tempuri.org/")]
    public class getServerAddressWithPortResponse
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public schemas.datacontract.org.Service.AddressResponse getServerAddressWithPortResult;
    }
    
    public class getServerAddressWithPortResponseDataContractSerializer : DataContractSerializer
    {
        
        public getServerAddressWithPortResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public getServerAddressWithPortResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            getServerAddressWithPortResponse getServerAddressWithPortResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                getServerAddressWithPortResponseField = new getServerAddressWithPortResponse();
                reader.Read();
                schemas.datacontract.org.Service.AddressResponseDataContractSerializer getServerAddressWithPortResultDCS = new schemas.datacontract.org.Service.AddressResponseDataContractSerializer("getServerAddressWithPortResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/Service");
                getServerAddressWithPortResultDCS.BodyParts = this.BodyParts;
                getServerAddressWithPortResponseField.getServerAddressWithPortResult = ((schemas.datacontract.org.Service.AddressResponse)(getServerAddressWithPortResultDCS.ReadObject(reader)));
                reader.ReadEndElement();
            }
            return getServerAddressWithPortResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            getServerAddressWithPortResponse getServerAddressWithPortResponseField = ((getServerAddressWithPortResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                schemas.datacontract.org.Service.AddressResponseDataContractSerializer getServerAddressWithPortResultDCS = new schemas.datacontract.org.Service.AddressResponseDataContractSerializer("getServerAddressWithPortResult", "http://tempuri.org/", "http://schemas.datacontract.org/2004/07/Service");
                getServerAddressWithPortResultDCS.BodyParts = this.BodyParts;
                getServerAddressWithPortResultDCS.WriteObject(writer, getServerAddressWithPortResponseField.getServerAddressWithPortResult);
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://tempuri.org/")]
    public class keepAlive
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public string myMacAddress;
        
        [DataMember(Order=1, IsNillable=true, IsRequired=false)]
        public string mycurrentTime;
        
        [DataMember(Order=2, IsRequired=false)]
        public int port;
    }
    
    public class keepAliveDataContractSerializer : DataContractSerializer
    {
        
        public keepAliveDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public keepAliveDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            keepAlive keepAliveField = null;
            if (IsParentStartElement(reader, false, true))
            {
                keepAliveField = new keepAlive();
                reader.Read();
                if (IsChildStartElement(reader, "myMacAddress", true, false))
                {
                    reader.Read();
                    keepAliveField.myMacAddress = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "mycurrentTime", true, false))
                {
                    reader.Read();
                    keepAliveField.mycurrentTime = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "port", false, false))
                {
                    reader.Read();
                    keepAliveField.port = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return keepAliveField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            keepAlive keepAliveField = ((keepAlive)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "myMacAddress", true, false, keepAliveField.myMacAddress))
                {
                    writer.WriteString(keepAliveField.myMacAddress);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "mycurrentTime", true, false, keepAliveField.mycurrentTime))
                {
                    writer.WriteString(keepAliveField.mycurrentTime);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "port", false, false, keepAliveField.port))
                {
                    writer.WriteString(XmlConvert.ToString(keepAliveField.port));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://tempuri.org/")]
    public class keepAliveResponse
    {
        
        [DataMember(Order=0, IsRequired=false)]
        public bool keepAliveResult;
    }
    
    public class keepAliveResponseDataContractSerializer : DataContractSerializer
    {
        
        public keepAliveResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public keepAliveResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            keepAliveResponse keepAliveResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                keepAliveResponseField = new keepAliveResponse();
                reader.Read();
                if (IsChildStartElement(reader, "keepAliveResult", false, false))
                {
                    reader.Read();
                    keepAliveResponseField.keepAliveResult = XmlConvert.ToBoolean(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return keepAliveResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            keepAliveResponse keepAliveResponseField = ((keepAliveResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "keepAliveResult", false, false, keepAliveResponseField.keepAliveResult))
                {
                    writer.WriteString(XmlConvert.ToString(keepAliveResponseField.keepAliveResult));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [ServiceContract(Namespace="http://tempuri.org/")]
    [PolicyAssertion(Namespace="http://schemas.xmlsoap.org/ws/2004/09/policy", Name="All", PolicyID="WSHttpBinding_IService1_policy")]
    public interface IIService1
    {
        
        [OperationContract(Action="http://tempuri.org/IService1/getServerAddressWithPort")]
        getServerAddressWithPortResponse getServerAddressWithPort(getServerAddressWithPort req);
        
        [OperationContract(Action="http://tempuri.org/IService1/keepAlive")]
        keepAliveResponse keepAlive(keepAlive req);
    }
}
namespace schemas.datacontract.org.Service
{
    
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Service")]
    public class AddressResponse
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public string address;
        
        [DataMember(Order=1, IsNillable=true, IsRequired=false)]
        public string port;
        
        [DataMember(Order=2, IsNillable=true, IsRequired=false)]
        public string serverTime;
    }
    
    public class AddressResponseDataContractSerializer : DataContractSerializer
    {
        
        public AddressResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public AddressResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            AddressResponse AddressResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                AddressResponseField = new AddressResponse();
                reader.Read();
                if (IsChildStartElement(reader, "address", true, false))
                {
                    reader.Read();
                    AddressResponseField.address = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "port", true, false))
                {
                    reader.Read();
                    AddressResponseField.port = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "serverTime", true, false))
                {
                    reader.Read();
                    AddressResponseField.serverTime = reader.ReadString();
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return AddressResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            AddressResponse AddressResponseField = ((AddressResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "address", true, false, AddressResponseField.address))
                {
                    writer.WriteString(AddressResponseField.address);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "port", true, false, AddressResponseField.port))
                {
                    writer.WriteString(AddressResponseField.port);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "serverTime", true, false, AddressResponseField.serverTime))
                {
                    writer.WriteString(AddressResponseField.serverTime);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }
}
